{"version":3,"sources":["decorators.js"],"names":["Object","defineProperty","exports","value","_shouter","require","checkChannelAndRouteName","channel","route","Error","triggerOnEvent","getOldMessage","arguments","length","undefined","target","name","descriptor","fun","shouter","on","shoutOnSet","orgFun","set","_len","args","Array","_key","trigger","apply","concat","call","this","shoutOnGet","get","_len2","_key2"],"mappings":"AAAA,YAEAA,QAAOC,eAAeC,QAAS,cAC3BC,OAAO,GAGX,IAAIC,UAAWC,QAJO,aAElBC,yBAA2B,SAACC,EAASC,GACrC,IAAKD,IAAYC,EACb,KAAM,IAAIC,OAAM,4CAIpBC,eAAiB,SAACH,EAASC,GAK3B,GALkCG,GAAaC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,IAAG,EAAKA,UAAA,EAGvD,OAFAN,0BAAyBC,EAASC,GAE3B,SAASO,EAAQC,EAAMC,GAO1B,GANYC,GAAOD,EAAdd,KACLC,UAAAe,QAAQC,GAAGb,EAASC,EAAOU,EAAKH,EAAQJ,KAI5CU,WAAa,SAACd,EAASC,GAEvB,MADAF,0BAAyBC,EAASC,GAC3B,SAACO,EAAQC,EAAMC,GAQlB,GAPUK,GAAUL,EAAfM,GACLN,GAAWM,IAAM,WASb,IAAK,GAAIC,GAAOZ,UAAUC,OATDY,EAAIC,MAAAF,GAAAG,EAAA,EAAAH,EAAAG,EAAAA,IAAJF,EAAIE,GAAAf,UAAAe,EAE7B,OADAvB,UAAAe,QAAQS,QAAOC,MAAAzB,SAAAe,SAACZ,EAASC,GAAKsB,OAAKL,IAC5BH,EAAYS,KAAAF,MAANP,GAANU,MAAIF,OAAYL,OAK/BQ,WAAa,SAAC1B,EAASC,GAEvB,MADAF,0BAAyBC,EAASC,GAC3B,SAACO,EAAQC,EAAMC,GAalB,GAZUK,GAAUL,EAAfiB,GACLjB,GAAWiB,IAAM,WAcb,IAAK,GAAIC,GAAQvB,UAAUC,OAdFY,EAAIC,MAAAS,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,IAAJX,EAAIW,GAAAxB,UAAAwB,EAC7B,IAAIjC,GAAQmB,EAAYS,KAAAF,MAANP,GAANU,MAAIF,OAAYL,GAE5B,OADArB,UAAAe,QAAQS,QAAQrB,EAASC,EAAOL,GACzBA,IAsBnBD,SAjBQQ,eAAAA,eAkBRR,QAlBwBmB,WAAAA,WAmBxBnB,QAnBoC+B,WAAAA,WAoBpC/B,QAAQ,YAnBQQ,eAAAA,eAAgBW,WAAAA,WAAYY,WAAAA","file":"decorators.js","sourcesContent":["'use strict';\n\nimport {shouter} from './shouter';\n\nlet checkChannelAndRouteName = (channel, route) => {\n    if (!channel || !route) {\n        throw new Error('You must specify both channel and route');\n    }\n};\n\nvar triggerOnEvent = (channel, route, getOldMessage = false) => {\n    checkChannelAndRouteName(channel, route);\n\n    return function(target, name, descriptor) {\n        var {value: fun} = descriptor;\n        shouter.on(channel, route, fun, target, getOldMessage);\n    };\n};\n\nvar shoutOnSet = (channel, route) => {\n    checkChannelAndRouteName(channel, route);\n    return (target, name, descriptor) => {\n        var {set: orgFun} = descriptor;\n        descriptor.set = function(...args) {\n            shouter.trigger(channel, route, ...args);\n            return this::orgFun(...args);\n        };\n    };\n};\n\nvar shoutOnGet = (channel, route) => {\n    checkChannelAndRouteName(channel, route);\n    return (target, name, descriptor) => {\n        var {get: orgFun} = descriptor;\n        descriptor.get = function(...args) {\n            var value = this::orgFun(...args);\n            shouter.trigger(channel, route, value);\n            return value;\n        };\n    };\n};\n\nexport {triggerOnEvent, shoutOnSet, shoutOnGet};\nexport default {triggerOnEvent, shoutOnSet, shoutOnGet};\n"],"sourceRoot":"/source/"}